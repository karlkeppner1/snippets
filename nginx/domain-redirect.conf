###########################################################
# Example: Redirect at the domain level
# http(s)://example.domain.com/
###########################################################

###########################################################
# server {
#     listen 80;
#     # 
#     server_name example.domain.com; # matches Host header of example.domain.com
#     server_name *.domain.com; # matches Host header of all domain.com subdomains 1 level deep
#     # redirect anything on host to new host maintaining any uri and query
#     return 301 https://<new-host>$uri$query_string;
#     return 301 https://<new-host>$request_uri;
#     # redirect anything on host to new host maintaining any uri and dropping query
#     return 301 https://<new-host>$uri;
#     # redirect anything on host to new host and drop any uri or query
#     return 301 https://<new-host>/;
# }
###########################################################

###########################################################
# server { # server declaration, similar to apache virtual host
#     listen 80; # port to listen on, should always be 80 in this project, ALB will proved TLS off-loading
#     server_name <FQDN> <FQDN>; # may use single FQDN or space seperated list
#     location / { # '/' is the root of the domain and is the most general, and therefore last URI checked (think default route) in this project, only '/' should be used as this project is not designed or architected to reverse proxy requests.
#         return 301 <new_url>; # new_url should be the full URL, to include protocol and URI path eg. https://www.domain.com/content/domain.html
#     }
# }
###########################################################